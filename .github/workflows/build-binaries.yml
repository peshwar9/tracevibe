name: Build Binaries (No Release)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build-mac:
    name: Build macOS
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - goarch: amd64
            suffix: darwin-amd64
          - goarch: arm64
            suffix: darwin-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build binary
        env:
          GOOS: darwin
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          go build -v -ldflags="-s -w -X main.version=${{ github.event.inputs.version }}" \
            -o tracevibe-${{ matrix.suffix }}

          # Create archive
          tar -czf tracevibe-${{ matrix.suffix }}.tar.gz tracevibe-${{ matrix.suffix }}
          shasum -a 256 tracevibe-${{ matrix.suffix }}.tar.gz > tracevibe-${{ matrix.suffix }}.tar.gz.sha256

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tracevibe-${{ matrix.suffix }}
          path: |
            tracevibe-${{ matrix.suffix }}.tar.gz
            tracevibe-${{ matrix.suffix }}.tar.gz.sha256

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - goarch: amd64
            suffix: windows-amd64
          - goarch: arm64
            suffix: windows-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build binary
        env:
          GOOS: windows
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          go build -v -ldflags="-s -w -X main.version=${{ github.event.inputs.version }}" `
            -o tracevibe-${{ matrix.suffix }}.exe

          # Create archive
          Compress-Archive -Path "tracevibe-${{ matrix.suffix }}.exe" `
            -DestinationPath "tracevibe-${{ matrix.suffix }}.zip"

          # Generate checksum
          $hash = Get-FileHash "tracevibe-${{ matrix.suffix }}.zip" -Algorithm SHA256
          "$($hash.Hash.ToLower())  tracevibe-${{ matrix.suffix }}.zip" | `
            Out-File -FilePath "tracevibe-${{ matrix.suffix }}.zip.sha256" -NoNewline

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tracevibe-${{ matrix.suffix }}
          path: |
            tracevibe-${{ matrix.suffix }}.zip
            tracevibe-${{ matrix.suffix }}.zip.sha256

  summary:
    name: Build Summary
    needs: [build-mac, build-windows]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifacts
        run: |
          echo "## Build Complete! ðŸŽ‰"
          echo ""
          echo "Version: ${{ github.event.inputs.version }}"
          echo ""
          echo "### Downloaded Artifacts:"
          find artifacts -type f -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" | sort
          echo ""
          echo "### Next Steps:"
          echo "1. Download the artifacts from the Actions tab"
          echo "2. Create a GitHub release manually"
          echo "3. Upload the binaries to the release"
          echo ""
          echo "Or use GitHub CLI locally:"
          echo '```bash'
          echo 'gh release create ${{ github.event.inputs.version }} \'
          echo '  --title "TraceVibe ${{ github.event.inputs.version }}" \'
          echo '  --notes "Release notes here" \'
          echo '  artifacts/*'
          echo '```'